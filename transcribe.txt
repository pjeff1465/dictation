async function transcribeAudio() {
    let activeTab = document.querySelector('.tab-content.active');
    let activeTabId = activeTab ? activeTab.id : null;

    //const audioBlob = tabAudioData[activeTabId]?.audioBlob;
    const audioBlob = activeTabId ? tabAudioData[activeTabId]?.audioBlob : recordedBlob;

    //if (!activeAudioBlob) {

    if(!audioBlob) {
        alert("No audio available");
        speak("No audio to transcribe! Please record or upload an audio.");
        return;
    }

    //const audioBlob = activeAudioBlob;
    const filename = "audio_input.webm"

    speak("Transcribing audio.....")

    waitingSound.loop = true; // loop waiting sound until done
    waitingSound.play();

    const progressBarContainer = document.getElementById("myProgressBar-transcribe");
    const progressBar = progressBarContainer.querySelector(".bar");

    let width = 0;

    // progress bar
    progressBarContainer.style.display = "block";
    transcribeBtn.disabled = true;

    const interval = setInterval(() => {
        if (width >= 100) {
            clearInterval(interval);
            transcribeBtn.disabled = false;
        } else {
            width++;
            progressBar.style.width = width + "%";
        }
    }, 80); // update every 50ms 

    const formData = new FormData();
    formData.append("file", audioBlob, filename);

    // create audio element
    const audioURL = URL.createObjectURL(audioBlob);
    const audioElement = new Audio(audioURL);
    audioElement.controls = true;

    // display in container
    const audioContainer = document.querySelector("#audio-container");
    if (audioContainer) {
        audioContainer.innerHTML = "";
        audioContainer.appendChild(audioElement);
    } else {
        console.warn("#audio-container element nto found!");
    }

    // call backend to transcribe audio
    try {
        const response = await fetch("http://localhost:8000/transcribe", {
            method: "POST",
            body: formData
        });
        console.log(response);

        const data = await response.json();
        console.log(data);
        const transcriptionText = data.transcription;

        //document.querySelector("#transcription-box").value = data.transcription;
        
        // insertTranscriptionIntoActiveTab(data.transcription, audioBlob);
        //const activeTab = document.querySelector('.tab-content.active').id;
        
        tabAudioData[activeTabId] = {
            ...tabAudioData[activeTabId],
            audioBlob: audioBlob
        };

        insertTranscriptionIntoActiveTab(transcriptionText, audioBlob);
        
    } catch (err) {
        console.error("Transcription error:", err);
    } finally {
        // stop progress bar
        clearInterval(interval);
        progressBar.style.width = "100%";
        progressBarContainer.style.display = "none";
        transcribeBtn.disabled = false;
        waitingSound.pause();
        waitingSound.loop = false;
        waitingSound.currentTime = 0;
        speak("Transcription Finished!")

        speak("To hear your transcription press 1.")
    }
}


paper.html 
this is my original
   <div class="center-wrapper">
        <div class="tab-container">
            <!-- tab buttons for different paper sections -->
            <div class="tab-buttons">
                <button class="tab-btn active" data-tab="abstract">Abstract</button>
                <button class="tab-btn" data-tab="intro">Introduction</button>
                <button class="tab-btn" data-tab="body">Body</button>
                <button class="tab-btn" data-tab="conclusion">Conclusion</button>
            </div>

            <!-- Upload/Record buttons for each sections -->
            <div class="tab-tools">

                <!-- Upload recording -->
                <!-- <label class="upload-label">
                    Upload file
                    <input type="file" id="audioFile" accept="audio/*">
                    <input type="file" id="textFileUpload" accept=".txt,.docx">

                    <div id="audio-container"></div>
                </label> -->

                <label>
                    Upload Audio
                    <input type="file" id="audioFile" accept="audio/*">
                    <!-- <input type="file" id="textFileUpload" accept=".txt,.docx"> -->
                </label>
                
                <!-- <label>
                    Upload Text
                    <input type="file" id="textFile" accept=".txt,.docx">
                </label> -->

                <!-- Record Audio -->
                <div class="button-container">
                    <button class="play-button" aria-label="Record Audio">Record</button>
                    <button class="pause-button">Pause</button>
                    <button class="stop-button">Stop</button>
                    <button id="transcribe-button" class="transcribe-button">Transcribe</button>
                </div>
            
                <p class="timer">Not recording</p>
            
                <canvas width="300" height="100"></canvas>
            
                <!-- Progress Bar -->
                <div id="myProgressBar-transcribe" style="display: none;" >
                    <p>Transcribing in progress...</p>
                    <div class="progress-container">
                        <div class="bar"></div>
                    </div>
                </div>

            </div>

            <!-- Tab Text Areas -->
            <div id="abstract" class="tab-content active">
                <textarea id="transcription-box-abstract" placeholder="Write your abstract here..."></textarea>
                <div class="tab-audio"></div>
            </div>

            <div id="intro" class="tab-content">
                <textarea id = "transcription-box-intro" placeholder="Write your intro here..."></textarea>
                <div class="tab-audio"></div>
            </div>

            <div id="body" class="tab-content">
                <div class="tab-audio"></div>
                <textarea id = "transcription-box-body" placeholder="Write your body here..."></textarea>
            </div>

            <div id="conclusion" class="tab-content">
                <textarea id = "transcription-box-conclusion" placeholder="Write your conclusion here..."></textarea>
                <div class="tab-audio"></div>
            </div>
        </div>



@router.post("/paper")
async def create_paper_format(request: Request, style: str = Form(default="academic-paper")):
    form = await request.form()
    print("Form keys:", list(form.keys()))

    sections = {}

    style_config = STYLE_TEMPLATES.get(style.lower())
    if not style_config:
        raise HTTPException(status_code=400, detail="Unsupported style")

    for section_key in style_config["sections"]:
        raw_text = form.get(section_key) or form.get(section_key.lower()) or ""
        prompt_template = style_config["prompts"].get(section_key)

        if prompt_template and raw_text.strip():
            prompt = prompt_template.format(text=raw_text)
            try:
                response = requests.post("http://localhost:11434/api/generate", json={
                    "model": "mistral",
                    "prompt": prompt,
                    "stream": False
                })
                response.raise_for_status()
                result = response.json().get("response", "{}")
            except Exception as e:
                print(f"Error during AI call for section {section_key}: {e}")
                continue

            try:
                parsed = json.loads(result)
            except json.JSONDecodeError:
                print(f"Failed to aprse JSON for section {section_key}: {result}")
                parsed = {}

            # handle parsed content or fallback to raw_text
            if isinstance(parsed, dict):
                # flatten if header or use parsed summary
                if section_key.lower() == "header":
                    sections["Title"] = parsed.get("title", "")
                    sections["Author(s)"] = parsed.get("authors", "")
                    sections["Department"] = parsed.get("department", "")
                    sections["University"] = parsed.get("university", "")
                else:
                    #sections[section_key.capitalize()] = parsed.get("summary", raw_text)
                    sections[section_key.capitalize()] = result.strip() or raw_text
            else:
                sections[section_key.capitalize()] = raw_text
        else:
            sections[section_key.capitalize()] = raw_text

    # pass style_config["pdf_settings"] to customize PDF generation if needed
    pdf = generate_dynamic_pdf(style, sections)

    pdf_output = BytesIO()
    pdf_bytes = pdf.output(dest='S').encode('latin1')
    pdf_output.write(pdf_bytes)
    # pdf.output(pdf_output)
    #pdf.output = pdf.output(dest='S').encode('latin-1')
    pdf_output.seek(0)

    return StreamingResponse(pdf_output, media_type="application/pdf", headers={
        "Content-Disposition": "attachment; filename=paper_format.pdf"
    })

@router.post("/paper-format")
async def paper_format(request: Request):
    form = await request.form()
    style = form.get("style", "academic")

    sections = {key: value for key, value in form.items() if key != "style"}

    pdf = generate_dynamic_pdf(style, sections)
    pdf_output = pdf.output(dest='S').encode('latin1')
    pdf_buffer = BytesIO(pdf_output)

    return StreamingResponse(pdf_buffer, media_type="application/pdf", headers={
        "Content-Disposition": "inline; filename=paper_format.pdf"
    })
